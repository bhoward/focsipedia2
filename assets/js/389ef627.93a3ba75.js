"use strict";(self.webpackChunkfocsipedia=self.webpackChunkfocsipedia||[]).push([[5365],{8141:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ocaml","title":"OCaml","description":"OCaml is a functional programming language developed at Inria over the past thirty years.","source":"@site/focsipedia-docs/target/mdoc/ocaml.mdx","sourceDirName":".","slug":"/ocaml","permalink":"/focsipedia2/docs/ocaml","draft":false,"unlisted":false,"editUrl":"https://github.com/bhoward/focsipedia2/edit/main/docs/ocaml.mdx","tags":[],"version":"current","frontMatter":{"id":"ocaml","title":"OCaml"},"sidebar":"mySidebar","previous":{"title":"ReasonML","permalink":"/focsipedia2/docs/reason"},"next":{"title":"CSC 233 Topics","permalink":"/focsipedia2/docs/233topics"}}');var r=n(74848),o=n(28453);const i={id:"ocaml",title:"OCaml"},s="OCaml",l={},c=[];function d(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"ocaml",children:"OCaml"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://ocaml.org/",children:"OCaml"})," is a functional programming language developed at ",(0,r.jsx)(t.a,{href:"https://www.inria.fr/en",children:"Inria"})," over the past thirty years.\nIt belongs to the ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/ML_(programming_language)",children:"ML"})," family of statically-typed\nfunctional languages, which includes ",(0,r.jsx)(t.a,{href:"http://sml-family.org/",children:"Standard ML"}),",\n",(0,r.jsx)(t.a,{href:"https://reasonml.github.io/",children:"ReasonML"}),", and Microsoft's ",(0,r.jsx)(t.a,{href:"https://fsharp.org/",children:"F#"}),". ML was originally\ndeveloped as the ",(0,r.jsx)(t.strong,{children:"M"}),"eta ",(0,r.jsx)(t.strong,{children:"L"}),"anguage for the LCF theorem prover at the University of\nEdinburgh, and has long been a valuable tool for programmers working with formal logic or\ndeveloping other programming languages. It was a major influence in the design of the\nfunctional languages ",(0,r.jsx)(t.a,{href:"https://www.haskell.org/",children:"Haskell"})," and\n",(0,r.jsx)(t.a,{href:"https://www.scala-lang.org/",children:"Scala"}),", and more recently it has seen adoption in financial\nservices (for example, ",(0,r.jsx)(t.a,{href:"https://bloomberg.com/",children:"Bloomberg"})," and\n",(0,r.jsx)(t.a,{href:"https://janestreet.com",children:"Jane Street"}),") and web development (particularly at\n",(0,r.jsx)(t.a,{href:"https://facebook.com",children:"Facebook"}),")."]}),"\n",(0,r.jsx)(t.p,{children:"One advantage of OCaml is that its compiler is remarkably fast and sophisticated, and it can\ngenerate JavaScript output for running programs in a web browser. In fact, since the\ncompiler itself is written in OCaml, it is possible to compile the entire system to\nJavaScript and run it in the browser."}),"\n",(0,r.jsx)(t.p,{children:"Here is an editor where you can type in OCaml code and execute it (click the button\nor type Ctrl-Enter):"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ocaml",metastring:"edit",children:"let x = 6\nlet y = x * 7\nlet rec fact x = if x <= 1 then 1 else x * (fact (x - 1))\nlet _ = fact 5\n"})}),"\n",(0,r.jsx)(t.p,{children:"If for some reason you want to reset the interpreter before executing the code (so that\nit will forget previous bindings), press the Shift key plus Ctrl-Enter."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(96540);const r={},o=a.createContext(r);function i(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);